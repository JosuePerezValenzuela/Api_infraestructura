import { MigrationInterface, QueryRunner } from 'typeorm';

export class InitInfraestructura1758545008735 implements MigrationInterface {
  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(`
            CREATE SCHEMA IF NOT EXISTS infraestructura;

CREATE  TABLE infraestructura.campus ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  START WITH 1  ) ,
	codigo							 varchar(16) NOT NULL,
	nombre               varchar(128)  NOT NULL  ,
	direccion            varchar(256)  NOT NULL  ,
	coordenadas          point  NOT NULL  ,
	activo               boolean DEFAULT TRUE NOT NULL  ,
	creado_en            timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	actualizado_en       timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	CONSTRAINT pk_campus PRIMARY KEY ( id )
 );

CREATE  TABLE infraestructura.facultades ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  START WITH 1  ) ,
	nombre               varchar(128)  NOT NULL  ,
	nombre_corto         varchar(16)    ,
	coordenadas          point  NOT NULL  ,
	activo               boolean DEFAULT TRUE NOT NULL  ,
	creado_en            timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	actualizado_en       timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	campus_id            integer  NOT NULL  ,
	CONSTRAINT pk_facultades PRIMARY KEY ( id ),
	CONSTRAINT fk_facultades_campus FOREIGN KEY ( campus_id ) REFERENCES infraestructura.campus( id )   
 );

CREATE INDEX idx_facultades_campus_id ON infraestructura.facultades  ( campus_id );

CREATE  TABLE infraestructura.instituciones ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  START WITH 1  ) ,
	nombre               varchar(64)  NOT NULL  ,
	nombre_corto         varchar(16)    ,
	coordenadas          point    ,
	activo               boolean DEFAULT TRUE NOT NULL  ,
	creado_en            timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	actualizado_en       timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	CONSTRAINT pk_institucion PRIMARY KEY ( id )
 );

CREATE  TABLE infraestructura.tipo_activos ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  START WITH 1  ) ,
	nombre               varchar(64)  NOT NULL  ,
	descripcion          varchar(128)  NOT NULL  ,
	activo               boolean DEFAULT TRUE NOT NULL  ,
	creado_en            timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	actualizado_en       timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	CONSTRAINT pk_tipo_activos PRIMARY KEY ( id )
 );

CREATE  TABLE infraestructura.tipo_ambientes ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  START WITH 1  ) ,
	nombre               varchar(64)  NOT NULL  ,
	descripcion          varchar(256)  NOT NULL  ,
	descripcion_corta    varchar(32)    ,
	activo               boolean DEFAULT TRUE NOT NULL  ,
	creado_en            timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	actualizado_en       timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	CONSTRAINT pk_tipo_ambientes PRIMARY KEY ( id )
 );

CREATE  TABLE infraestructura.tipo_bloques ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  START WITH 1  ) ,
	nombre               varchar(64)  NOT NULL  ,
	descripcion          varchar(256)  NOT NULL  ,
	activo               boolean DEFAULT TRUE NOT NULL  ,
	creado_en            timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	actualizado_en       timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	CONSTRAINT pk_tipo_bloque PRIMARY KEY ( id )
 );

CREATE  TABLE infraestructura.bloques ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  START WITH 1  ) ,
	nombre               varchar(128)  NOT NULL  ,
	nombre_corto         varchar(16)    ,
	codigo               smallint  NOT NULL  ,
	pisos                smallint    ,
	activo               boolean DEFAULT TRUE NOT NULL  ,
	creado_en            timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	actualizado_en       timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	facultad_id          integer  NOT NULL  ,
	tipo_bloque_id       integer  NOT NULL  ,
	institucion_id       integer    ,
	CONSTRAINT pk_bloques PRIMARY KEY ( id ),
	CONSTRAINT fk_bloques_facultades FOREIGN KEY ( facultad_id ) REFERENCES infraestructura.facultades( id )   ,
	CONSTRAINT fk_bloques_tipo_bloque FOREIGN KEY ( tipo_bloque_id ) REFERENCES infraestructura.tipo_bloques( id )   ,
	CONSTRAINT fk_bloques_institucion FOREIGN KEY ( institucion_id ) REFERENCES infraestructura.instituciones( id )   
 );

CREATE INDEX idx_bloques_facultad_id ON infraestructura.bloques  ( facultad_id );

CREATE INDEX idx_bloques_tipo_bloque_id ON infraestructura.bloques  ( tipo_bloque_id );

CREATE INDEX idx_bloques_institucion_id ON infraestructura.bloques  ( institucion_id );

CREATE  TABLE infraestructura.ambientes ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  START WITH 1  ) ,
	nombre               varchar(64)  NOT NULL  ,
	nombre_corto         varchar(16)    ,
	codigo               integer  NOT NULL  ,
	piso                 smallint    ,
	capacidad            jsonb DEFAULT '{"total":0,"examen":0}'::jsonb   ,
	dimension            jsonb DEFAULT '{"largo":0,"ancho":0,"alto":0,"unid_med":"metros"}'::jsonb   ,
	componentes          jsonb    ,
	coordenadas          point  NOT NULL  ,
	clases               boolean  NOT NULL  ,
	activo               boolean DEFAULT TRUE NOT NULL  ,
	creado_en            timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	actualizado_en       timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	tipo_ambiente_id     integer  NOT NULL  ,
	bloque_id            integer  NOT NULL  ,
	CONSTRAINT pk_ambientes PRIMARY KEY ( id ),
	CONSTRAINT fk_ambientes_tipo_ambientes FOREIGN KEY ( tipo_ambiente_id ) REFERENCES infraestructura.tipo_ambientes( id )   ,
	CONSTRAINT fk_ambientes_bloques FOREIGN KEY ( bloque_id ) REFERENCES infraestructura.bloques( id )   
 );

CREATE INDEX idx_ambientes_tipo_ambiente_id ON infraestructura.ambientes  ( tipo_ambiente_id );

CREATE INDEX idx_ambientes_bloque_id ON infraestructura.ambientes  ( bloque_id );

CREATE INDEX idx_ambientes_capacidad_gin ON infraestructura.ambientes USING GIN ( capacidad );

CREATE  TABLE infraestructura.activos ( 
	id                   varchar(32)  NOT NULL  ,
	nombre               varchar(32)  NOT NULL  ,
	descripcion          varchar(128)    ,
	activo               boolean DEFAULT TRUE NOT NULL  ,
	numero_serie         varchar(32)    ,
	garantia             date  NOT NULL  ,
	creado_en            timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	actualizado_en       timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	tipo_activo_id       integer  NOT NULL  ,
	ambiente_id          integer    ,
	CONSTRAINT pk_activos PRIMARY KEY ( id ),
	CONSTRAINT fk_activos_tipo_activos FOREIGN KEY ( tipo_activo_id ) REFERENCES infraestructura.tipo_activos( id )   ,
	CONSTRAINT fk_activos_ambientes FOREIGN KEY ( ambiente_id ) REFERENCES infraestructura.ambientes( id )   
 );

CREATE INDEX idx_activos_tipo_activo_id ON infraestructura.activos  ( tipo_activo_id );

CREATE INDEX idx_activos_ambiente_id ON infraestructura.activos  ( ambiente_id );

-- infraestructura
CREATE OR REPLACE FUNCTION infraestructura.tg_touch_actualizado_en()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
  -- Si es INSERT, fija el timestamp de ahora si vino nulo
  IF TG_OP = 'INSERT' THEN
    NEW.actualizado_en := COALESCE(NEW.actualizado_en, CURRENT_TIMESTAMP);
    RETURN NEW;
  END IF;

  IF TG_OP = 'UPDATE' THEN
    IF (to_jsonb(NEW) - 'actualizado_en') IS DISTINCT FROM (to_jsonb(OLD) - 'actualizado_en') THEN
      NEW.actualizado_en := CURRENT_TIMESTAMP;
    END IF;
    RETURN NEW;
  END IF;

  RETURN NEW;
END;
$$;

CREATE OR REPLACE FUNCTION infraestructura.tg_validar_capacidad_ambiente()
RETURNS trigger
LANGUAGE plpgsql
AS $$
DECLARE
  v_total_text  text;
  v_examen_text text;
BEGIN
  IF NEW.capacidad IS NULL THEN
    RAISE EXCEPTION 'capacidad no puede ser NULL y debe incluir total y examen';
  END IF;

  IF NOT (NEW.capacidad ? 'total' AND NEW.capacidad ? 'examen') THEN
    RAISE EXCEPTION 'El campo capacidad debe contener las claves: total y examen';
  END IF;

  v_total_text  := NEW.capacidad->>'total';
  v_examen_text := NEW.capacidad->>'examen';

  IF jsonb_typeof(NEW.capacidad->'total') <> 'number'
     OR jsonb_typeof(NEW.capacidad->'examen') <> 'number' THEN
     RAISE EXCEPTION 'total y examen deben ser números (JSON number)';
  END IF;

  -- Deben ser enteros >= 0  (regex: 1,2,3,... sin decimales ni signo)
  IF v_total_text  !~ '^(?:0|[1-9]\d*)$'
     OR v_examen_text !~ '^(?:0|[1-9]\d*)$' THEN
     RAISE EXCEPTION 'total y examen deben ser enteros >= 0';
  END IF;

  RETURN NEW;
END;
$$;

CREATE OR REPLACE FUNCTION infraestructura.tg_validar_dimension_ambiente()
RETURNS trigger
LANGUAGE plpgsql
AS $$
DECLARE
  v_largo numeric;
  v_ancho numeric;
  v_alto  numeric;
  v_unid  text;
BEGIN
  IF NEW.dimension IS NULL THEN
    RAISE EXCEPTION 'dimension no puede ser NULL';
  END IF;

  IF NOT (NEW.dimension ? 'largo'
          AND NEW.dimension ? 'ancho'
          AND NEW.dimension ? 'alto'
          AND NEW.dimension ? 'unid_med') THEN
    RAISE EXCEPTION 'dimension debe contener las claves: largo, ancho, alto, unid_med';
  END IF;

  IF jsonb_typeof(NEW.dimension->'largo')    <> 'number'
     OR jsonb_typeof(NEW.dimension->'ancho') <> 'number'
     OR jsonb_typeof(NEW.dimension->'alto')  <> 'number'
     OR jsonb_typeof(NEW.dimension->'unid_med') <> 'string' THEN
    RAISE EXCEPTION 'largo/ancho/alto deben ser números y unid_med debe ser texto';
  END IF;

  v_largo := (NEW.dimension->>'largo')::numeric;
  v_ancho := (NEW.dimension->>'ancho')::numeric;
  v_alto  := (NEW.dimension->>'alto')::numeric;
  v_unid  := lower(NEW.dimension->>'unid_med');

  IF v_largo < 0 OR v_ancho < 0 OR v_alto < 0 THEN
    RAISE EXCEPTION 'largo, ancho y alto deben ser >= 0';
  END IF;

  -- Ajusta el listado según tu catálogo de unidades
  IF v_unid NOT IN ('metros','centimetros','milimetros') THEN
    RAISE EXCEPTION 'unid_med inválida. Use metros, centimetros o milimetros';
  END IF;

  RETURN NEW;
END;
$$;

DROP TRIGGER IF EXISTS tr_activos_touch_actualizado_en ON infraestructura.activos;
CREATE TRIGGER tr_activos_touch_actualizado_en
BEFORE INSERT OR UPDATE ON infraestructura.activos
FOR EACH ROW
EXECUTE FUNCTION infraestructura.tg_touch_actualizado_en();

DROP TRIGGER IF EXISTS tr_ambientes_biu_validar_capacidad ON infraestructura.ambientes;

CREATE TRIGGER tr_ambientes_biu_validar_capacidad
BEFORE INSERT OR UPDATE ON infraestructura.ambientes
FOR EACH ROW
EXECUTE FUNCTION infraestructura.tg_validar_capacidad_ambiente();

DROP TRIGGER IF EXISTS tr_ambientes_biu_validar_dimension ON infraestructura.ambientes;

CREATE TRIGGER tr_ambientes_biu_validar_dimension
BEFORE INSERT OR UPDATE ON infraestructura.ambientes
FOR EACH ROW
EXECUTE FUNCTION infraestructura.tg_validar_dimension_ambiente();

DROP TRIGGER IF EXISTS tr_ambientes_touch_actualizado_en ON infraestructura.ambientes;
CREATE TRIGGER tr_ambientes_touch_actualizado_en
BEFORE INSERT OR UPDATE ON infraestructura.ambientes
FOR EACH ROW
EXECUTE FUNCTION infraestructura.tg_touch_actualizado_en();

DROP TRIGGER IF EXISTS tr_bloques_touch_actualizado_en ON infraestructura.bloques;
CREATE TRIGGER tr_bloques_touch_actualizado_en
BEFORE INSERT OR UPDATE ON infraestructura.bloques
FOR EACH ROW
EXECUTE FUNCTION infraestructura.tg_touch_actualizado_en();

DROP TRIGGER IF EXISTS tr_campus_touch_actualizado_en ON infraestructura.campus;
CREATE TRIGGER tr_campus_touch_actualizado_en
BEFORE INSERT OR UPDATE ON infraestructura.campus
FOR EACH ROW
EXECUTE FUNCTION infraestructura.tg_touch_actualizado_en();

DROP TRIGGER IF EXISTS tr_facultades_touch_actualizado_en ON infraestructura.facultades;
CREATE TRIGGER tr_facultades_touch_actualizado_en
BEFORE INSERT OR UPDATE ON infraestructura.facultades
FOR EACH ROW
EXECUTE FUNCTION infraestructura.tg_touch_actualizado_en();

DROP TRIGGER IF EXISTS tr_instituciones_touch_actualizado_en ON infraestructura.instituciones;
CREATE TRIGGER tr_instituciones_touch_actualizado_en
BEFORE INSERT OR UPDATE ON infraestructura.instituciones
FOR EACH ROW
EXECUTE FUNCTION infraestructura.tg_touch_actualizado_en();

DROP TRIGGER IF EXISTS tr_tipo_activos_touch_actualizado_en ON infraestructura.tipo_activos;
CREATE TRIGGER tr_tipo_activos_touch_actualizado_en
BEFORE INSERT OR UPDATE ON infraestructura.tipo_activos
FOR EACH ROW
EXECUTE FUNCTION infraestructura.tg_touch_actualizado_en();

DROP TRIGGER IF EXISTS tr_tipo_ambientes_touch_actualizado_en ON infraestructura.tipo_ambientes;
CREATE TRIGGER tr_tipo_ambientes_touch_actualizado_en
BEFORE INSERT OR UPDATE ON infraestructura.tipo_ambientes
FOR EACH ROW
EXECUTE FUNCTION infraestructura.tg_touch_actualizado_en();

DROP TRIGGER IF EXISTS tr_tipo_bloques_touch_actualizado_en ON infraestructura.tipo_bloques;
CREATE TRIGGER tr_tipo_bloques_touch_actualizado_en
BEFORE INSERT OR UPDATE ON infraestructura.tipo_bloques
FOR EACH ROW
EXECUTE FUNCTION infraestructura.tg_touch_actualizado_en();

COMMENT ON TABLE infraestructura.campus IS 'Tabla que almacena los campus de la universidad (Ej: central, medicina, etc)';

COMMENT ON COLUMN infraestructura.campus.id IS 'Clave unica de cada campus';

COMMENT ON COLUMN infraestructura.campus.nombre IS 'Nombre del campus';

COMMENT ON COLUMN infraestructura.campus.direccion IS 'Direccion del campus';

COMMENT ON COLUMN infraestructura.campus.coordenadas IS 'Coordenadas del campus';

COMMENT ON COLUMN infraestructura.campus.activo IS 'Indica si el campues esta activo';

COMMENT ON COLUMN infraestructura.campus.creado_en IS 'Fecha en la que se creo el registro';

COMMENT ON COLUMN infraestructura.campus.actualizado_en IS 'Fecha de la ultima vez en la que se actualizo el registro';

COMMENT ON TABLE infraestructura.facultades IS 'Tabla que almacena las facultades';

COMMENT ON COLUMN infraestructura.facultades.id IS 'Clave unica o codigo de la facultad';

COMMENT ON COLUMN infraestructura.facultades.nombre IS 'Nombre de la facultad';

COMMENT ON COLUMN infraestructura.facultades.nombre_corto IS 'Nombre corto de la facultad';

COMMENT ON COLUMN infraestructura.facultades.coordenadas IS 'coordenadas de la facultad';

COMMENT ON COLUMN infraestructura.facultades.activo IS 'Indica si la facultad esta activo';

COMMENT ON COLUMN infraestructura.facultades.creado_en IS 'Fecha en la que se creo el registro';

COMMENT ON COLUMN infraestructura.facultades.actualizado_en IS 'Ultima fecha en la que se actualizo el registro';

COMMENT ON COLUMN infraestructura.facultades.campus_id IS 'Referencia la llave de la tabla campus';

COMMENT ON COLUMN infraestructura.instituciones.id IS 'Clave unica de cada institucion';

COMMENT ON COLUMN infraestructura.instituciones.nombre IS 'Nombre de la institucion';

COMMENT ON COLUMN infraestructura.instituciones.nombre_corto IS 'Nombre corto de la institucion';

COMMENT ON COLUMN infraestructura.instituciones.coordenadas IS 'Ubicacion de la institucion';

COMMENT ON COLUMN infraestructura.instituciones.activo IS 'Indica si la institucion esta activa';

COMMENT ON COLUMN infraestructura.instituciones.creado_en IS 'Fecha en la que se registro este registro';

COMMENT ON COLUMN infraestructura.instituciones.actualizado_en IS 'Ultima actualizacion de un registro';

COMMENT ON COLUMN infraestructura.tipo_activos.id IS 'Clave unica para cada tipo de activo';

COMMENT ON COLUMN infraestructura.tipo_activos.nombre IS 'Nombre del tipo de activo';

COMMENT ON COLUMN infraestructura.tipo_activos.descripcion IS 'Descripcion sobre el tipo de activo';

COMMENT ON COLUMN infraestructura.tipo_activos.activo IS 'Indica si este tipo de activo esta activo';

COMMENT ON COLUMN infraestructura.tipo_activos.creado_en IS 'Fecha de la creacion del tipo de activo';

COMMENT ON COLUMN infraestructura.tipo_activos.actualizado_en IS 'Ultima fecha en la que se actualizo el activo';

COMMENT ON TABLE infraestructura.tipo_ambientes IS 'Tabla donde se guardan los tipos de ambientes (Ej: Aula, Laboratorio de quimica, Laboratorio de computacion, Auditorio, etc)';

COMMENT ON COLUMN infraestructura.tipo_ambientes.id IS 'Clave unica del tipo de ambiente';

COMMENT ON COLUMN infraestructura.tipo_ambientes.nombre IS 'Nombre del tipo de ambiente (Ej: Laboratorio de quimica)';

COMMENT ON COLUMN infraestructura.tipo_ambientes.descripcion IS 'Alguna descripcion adicional sobre el tipo de ambiente';

COMMENT ON COLUMN infraestructura.tipo_ambientes.descripcion_corta IS 'Descripcion corta sobre le tipo de ambiente';

COMMENT ON COLUMN infraestructura.tipo_ambientes.activo IS 'Este tipo de ambiente esta activo?';

COMMENT ON COLUMN infraestructura.tipo_ambientes.creado_en IS 'Indica la fecha de creacion de este tipo de ambiente';

COMMENT ON COLUMN infraestructura.tipo_ambientes.actualizado_en IS 'Indica la fecha de la ultima actualizacion del registro';

COMMENT ON COLUMN infraestructura.tipo_bloques.id IS 'Clave unica para cada tipo de bloque';

COMMENT ON TABLE infraestructura.bloques IS 'Tabla que guarda los bloques (Edificios o conjunto de edificios que contienen ambientes)';

COMMENT ON COLUMN infraestructura.bloques.id IS 'Clave unica para cada bloque';

COMMENT ON COLUMN infraestructura.bloques.nombre IS 'Nombre del bloque';

COMMENT ON COLUMN infraestructura.bloques.nombre_corto IS 'Nombre corto del bloque';

COMMENT ON COLUMN infraestructura.bloques.codigo IS 'Codigo del bloque';

COMMENT ON COLUMN infraestructura.bloques.pisos IS 'Cantidad de pisos que se tiene en el bloque';

COMMENT ON COLUMN infraestructura.bloques.activo IS 'Indica si el bloque esta activo';

COMMENT ON COLUMN infraestructura.bloques.creado_en IS 'Fecha de creacion del registro';

COMMENT ON COLUMN infraestructura.bloques.actualizado_en IS 'Ultima fecha de actualizacion del registro';

COMMENT ON COLUMN infraestructura.bloques.facultad_id IS 'Llave foranea a la tabla facultades';

COMMENT ON TABLE infraestructura.ambientes IS 'Tabla encargada de guardar informacion relacionada a los ambientes';

COMMENT ON COLUMN infraestructura.ambientes.id IS 'Clave unica de cada ambiente';

COMMENT ON COLUMN infraestructura.ambientes.nombre IS 'Nombre del ambiente (691A, 691B, etc)';

COMMENT ON COLUMN infraestructura.ambientes.nombre_corto IS 'Nombre corto del ambiente';

COMMENT ON COLUMN infraestructura.ambientes.codigo IS 'codigo de cada ambiente manejado por la UMSS';

COMMENT ON COLUMN infraestructura.ambientes.piso IS 'Indica en que piso esta situado el ambiente';

COMMENT ON COLUMN infraestructura.ambientes.capacidad IS 'Capacidad total del ambiente para una clase';

COMMENT ON COLUMN infraestructura.ambientes.dimension IS 'Largo, Ancho y Alto del ambiente';

COMMENT ON COLUMN infraestructura.ambientes.componentes IS 'Json que almacena los componentes extras que tiene un activo';

COMMENT ON COLUMN infraestructura.ambientes.coordenadas IS 'coordenadas del ambiente';

COMMENT ON COLUMN infraestructura.ambientes.clases IS 'Indica si este ambiente puede ser usado como aula de clases';

COMMENT ON COLUMN infraestructura.ambientes.activo IS 'Indica si el ambiente esta activo para su uso';

COMMENT ON COLUMN infraestructura.ambientes.creado_en IS 'Creado en';

COMMENT ON COLUMN infraestructura.ambientes.actualizado_en IS 'Actualizado en';

COMMENT ON COLUMN infraestructura.ambientes.tipo_ambiente_id IS 'Referencia la clave primaria de un tipo de ambiente';

COMMENT ON COLUMN infraestructura.ambientes.bloque_id IS 'Referencia la clave de un bloque';

COMMENT ON TABLE infraestructura.activos IS 'Tabla que almacena todos los activos existentes';

COMMENT ON COLUMN infraestructura.activos.id IS 'Codigo unico del activo (NIA)';

COMMENT ON COLUMN infraestructura.activos.nombre IS 'Nombre del activo';

COMMENT ON COLUMN infraestructura.activos.descripcion IS 'Descripcion sobre el activo';

COMMENT ON COLUMN infraestructura.activos.activo IS 'Indica el estado de este activo';

COMMENT ON COLUMN infraestructura.activos.numero_serie IS 'El numero de serie del activo';

COMMENT ON COLUMN infraestructura.activos.garantia IS 'Fecha hasta la cual la garantia del activo es valida';

COMMENT ON COLUMN infraestructura.activos.creado_en IS 'Fecha en la que se creo el registro';

COMMENT ON COLUMN infraestructura.activos.actualizado_en IS 'Fecha de la ultima actualizacion del registro';

COMMENT ON COLUMN infraestructura.activos.tipo_activo_id IS 'Llave foranea a la tabla tipo_activos';

COMMENT ON COLUMN infraestructura.activos.ambiente_id IS 'Llave foranea a ambientes';
            `);
  }

  public async down(queryRunner: QueryRunner): Promise<void> {}
}
